<pre>
  SIP: 2
  Title: Network-enforced Business Rulesets
  Author: Sidhujag <jsidhu@blockchainfoundry.co>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/syscoin/sips/wiki/Comments:SIP-0002
  Status: Draft
  Type: Standards Track
  Created: 2020-07-19
</pre>

== Introduction ==

Many projects today aim to interface stablecoins and crypto assets with existing financial frameworks. These frameworks have evolved to curtail or otherwise deal with tax evasion, fraud, terrorist activity and money laundering through the use of KYC/AML standards. Integrations need to follow these and future standards in order to comply. We are at a crossroads at which many technology pioneers expect the financial system to adapt, while the financial system requires integrated technologies to adapt to requirements which have been well-thought-out and market tested over generations. This proposal presents a dialectic and solution which makes it possible to realize the benefits of decentralized ledger technology without sacrificing compliance requirements. The opt-in approach presented here grants the ability for businesses running new-generation asset systems to comply, and also realize or create benefits and efficiencies that did not exist prior to the crypto economic expansion. Past attempts have been made using centralized or permissioned ledgers which are consortium-based. However, the settlement of value on those systems presented risks that are outweighed by the benefits of open, censorship-resistant and legal-neutral permissionless crypto-economic blockchain systems which make no distinctions on market participants. Being able to leverage the tremendous security of the Bitcoin network through settlement of value would be ideal in combination with legally-compliant transferability of those assets. This path provides reduced insurance and custodial service costs, finality of settlement which cannot be manipulated, and overall more efficient sovereign ownership of value.

The Syscoin network presents this option. It is based on the Bitcoin network protocol and is merge-mined with Bitcoin, effectively sharing the network security of Bitcoin, while also presenting unique features for businesses that are not possible with Bitcoin itself such as asset tokenization and scalable asset micro-transactions that receive near real-time fulfillment through the use of a DAG (Directed Acyclic Graph) payment mechanism called [https://syscoin.org/zdag_syscoin_whitepaper.pdf, ZDAG].

Compliance at scale must be provided without affecting the underlying premise of global settlement opportunities, and without hindering other non-compliant market participants, in order for blockchain technology to be of value to both finance and individuals looking for sovereign value ownership; Scalable financial inclusivity without compliance sacrifices. 

The system must provide compliance without requiring it in cases where is not needed. For assets that require it, consensus of mandatory compliance is enforced among all participants, providing ease-of-integration into existing financial markets.

=== Abstract ===

This document proposes a standard consensus rule to apply witness signature enforcement for Syscoin Platform Token transactions that 'opt-in'.
The key underlying premise is that compliance is necessary and provided, however scalability is also a necessity when dealing with P2P based BFT (Byzantine Fault Tolerant) crypto-economic consensus systems that inherently lack the scalability required for global adoption. With the requirement set forth that scalability is thus not to be negatively affected, we believe we have found a way to accomodate all requirements and provide the functionality needed for full compliance regardless of jurisdiction.

=== Motivation ===

Pre-compliance is a "holy grail" use case for those crypto assets that must be compliant with global regulations and money transmission policies. These policies are vastly different depending on jurisdiction, and are subject to evolve. That makes encoding these in consensus very difficult especially as such code is immutable once deployed.

Pre-compliance leads to post-compliance in effect, as checks are made prior to validation. Compliance is simply proving that no transaction may occur on the network without necessary preliminary policy checks which are auditable by policy makers at any time. The concern policy makers have with crypto asset compliance is that typically any pre-compliance strategy involves changes that are superfluous, in that they may be adapted by wallets and services, but not enforced by consensus, thus lacking a sufficiently broad mechanism to keep evaders at bay from crafting transactions that skip these checks. Doing so on the network validation layer will provide assurance to policy makers of no concerns around transactions entering the ledger that do not conform to regulations. Further, the rules are business-centric and can adapt to legal clarifications or to frameworks adapting to the industry. Part of the compliance framework is on-chain analysis tools such as [https://bitrankverified.com/home, QLUE or BitRank] which will further transaction compliance with address monitoring. Such monitoring is part of enabling crypto assets to go above and beyond what is requested of today's KYC/AML regulations, making it possible to allow asset settlement on a permissionless system in accordance with rules needed to operate in jurisdictions that require specific compliance checks. With such monitoring, post-validation such as freezing and black-listing can be enabled without requiring consensus changes, as transfers may be blocked by pre-compliance verifications by the end-points on future transactions.

Compliance is not the only use case. Business rules like Auxiliary Fees (fees a business extracts per transaction as part of Cost of Doing Business) can be applied as a revenue model to offset running costs or part of a business token economic model. These fees typically were either wallet-driven or central API-driven. Now they can be enforced by consensus and may be adaptable at any time based on evolving business requirements. End-point verification will ensure sufficient fees are applied to a transaction, and approve/reject based on criteria defined by the business. API-driven connectivity ensures that wallets, services and exchanges can adapt to requirements by consuming APIs that provide conformity to the process of performing checks and obtaining witness signatures needed for the transaction to be validated successfully.

== Description ==

Syscoin adds a witness field and requires signature sign-off by this witness for all transfers of the token, rather than management transactions that change the asset specification itself. On the API side it is open; left to the discretion of implementation designers. Below is a potential reference design. An API such as SyscoinJS API can know based on a registry which Program Manager end-point to call, or perhaps the URL of the end-point is encoded in the public data field of the asset definition. The end-point is requested to share its business requirements. For example, if extra fees (Auxiliary fees) are to be enforced, they can be described in the response so the SyscoinJS API can create the proper inputs/outputs for the transaction prior to a Witness signature. Upon crafting the final transaction, the end-point is queried for a Witness signature so it will validate on the network. Here the end-point may either have a naive implementation storing the private key for signing after doing basic checks (KYC/AML, on-chain analysis, black/white list approvals) and upon approval sign with the private key of the witness address defined in the Asset Witness field. To reduce central points of attack on the server holding the private key, threshold signatures or Shamir's Secret Sharing strategies can be used to offload the storage of the private key across multiple end-points. These end-points should only be known to the Program Manager end-point or connected amongst themselves to avoid DOS vulnerabilities. Either of the end-points can assume the role of coordinator in case the Program Manager end-point is unresponsive.

The Program Manager end-point will need cloud management to ensure resilience, colocation per query, CDN and automated backups and disaster recovery should be in place for resilience and fault-tolerance. The private key itself can be protected further by threshold sharding or threshold signatures so that even if some end-points do not respond in a timely manner not all need to respond in order to successfully sign a transaction.

It does not apply to all transactions globally. It will only apply to assets that define an address as the witness field of the asset. The spec looks as follows:

    ASSET_UPDATE_ADMIN=1, // "god mode" flag, governs flags field below
    ASSET_UPDATE_DATA=2, // can you update public data field?
    ASSET_UPDATE_CONTRACT=4, // can you update smart contract?
    ASSET_UPDATE_SUPPLY=8, // can you update supply?
    ASSET_UPDATE_FLAGS=16, // can you update flags? To lock-down the asset spec permanently, disable this one and admin flag as well
    ASSET_UPDATE_ALL=31



    // ERC20 smart contract to connect to the Sysethereum bridge
    std::vector<unsigned char> vchContract;
    // if changing the ERC20 smart contract must specify the previous one for disconnect/re-org purposes
    std::vector<unsigned char> vchPrevContract;
    // asset symbol 1-8 characters
    std::string strSymbol;
    // public data field, JSON input for fields that are relevant like description and end-point definitions
    std::vector<unsigned char> vchPubData;
    // previous public data in case public data is changing for disconnect/re-org purposes
    std::vector<unsigned char> vchPrevPubData;
    // balance being updated or defined upon creation of asset
    uint64_t nBalance;
    // total supply only set when creating an asset
    uint64_t nTotalSupply;
    // maximum supply set when creating an asset
    uint64_t nMaxSupply;
    // precision for this asset defined for user display purposes
    unsigned char nPrecision;
    // update flags mask of values from the enum above
    unsigned char nUpdateFlags;
    // previous flags if flags are changing for disconnect/re-org purposes
    unsigned char nPrevUpdateFlags;
    // NEW: witness required to sign on all transactions for this asset
    std::string strWitnessAddress;
    // NEW: previous witness required to sign on all transactions for this asset if witness address is changed for disconnect/re-org purposes
    std::string strPrevWitnessAddress;

You can see the new field of strWitnessAddress. If set, it will require consensus to validate that there exists an input from this address which will implicitly verify the signature of that input through OP_CHECKSIG script logic.

=== Design === 

The overall design looks as follows:

<img src=SIP-0002/design.png></img>

For integrations from services such as exchanges, wallets and providers. Those that use the Syscoin API will not need to take any further steps as they normally would. The Syscoin API will do all necessary work to call end-points and ensure transactions are created and submitted as valid. Nothing changes compared to existing crypto wallet implementations if using existing Syscoin API. The diagramming is meant for illustrative purposes to show what the Syscoin API would do to ensure pre-compliance under this proposal.

On the consensus layer, the SPT asset definition will include one more field for a witness address. If it is set, any transactions involving asset allocations (not asset update/transfer) will require the witness signature from that address based on the transaction signature hash. Doing so will mean one more input will be used in creating a simple transfer for an asset allocation but the cost of a simple input is fairly minimal. Just one signature verification must occur regardless of how many people signed off on it through the end-points (either through threshold signature or secret key sharing).

=== On-chain validation and enforcement, signature creation off-chain and distributed ===

On-chain there will only be a single signature required by a witness defined in the SPT. Offchain however one may wish to use multiple end-points to recreate the signature necessary for the witness validation. To reduce central bottlenecks in the system yet retain performance, you may choose to use secret sharing or threshold signatures (former if performance is of more concern, latter if privacy). In fact, depending on market conditions, one may choose to deploy different strategies at any time without requiring any change to the underlying consensus validation.

=== Secret key sharing ===

Shamir's Secret Sharing allows one to recreate a key yet retain compatibility with the underlying signature verification and validation process. The shards are distributed amongst peers and a central coordinator extracts and applies them together up to a threshold to re-create the private key necessary for signing. This comes at an obvious tradeoff of private key leakage yet it does have performance benefits as well as solving issues of downtime should that be the biggest concern. Perhaps it is not a big concern of leakage as long as the coordinator service is not confiscated, and if it is, the managers of the SPT would be able to update the key to a new one and re-deploy on new secured services without succumbing to further ramifications of any such attacks. If the concern around privacy is higher than performance then a threshold signature scheme can be employed at some cost of performance (requires roundtrip interactivity amongst end-point peers and cryptographic primitives that take a non-trivial amount of CPU cycles and memory). Secure communication and encrypted channels can be created to avoid man-in-the-middle or eavesdropping, however the central coordinator is a central bottleneck in the system which can be easily mitigated as redeployment is fairly simple if a breach occurs and no funds are at risk, rest or live. The most an attacker can do is prevent or not-prevent certain transactions from validating on the network, and the non-preventative case can be mitigated by further post-compliance measures to block addresses.

=== Multi Signatures and Threshold Signatures ===

To dissolve a single-point-of-attack scenario managers of SPTs may want to distribute signature creation to offload risk and have better control over situations where some end-points for API services have downtime. You may wish to use a threshold (high enough to justify validation securely, yet prevent situations where individual server downtime causes systemic downtime). There are different strategies to employees signing the witness signature required for transaction validation.

As per [https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki, BIP-0340], with Schnorr signatures, participants can aggregate their public keys into a single public key which they can jointly sign for. This allows ''k''-of-''n'' multi signatures which, from a verifier's perspective, are no different from ordinary signatures, giving improved privacy and efficiency versus ''CHECKMULTISIG'' or other means.

Moreover, Schnorr signatures are compatible with [https://web.archive.org/web/20031003232851/http://www.research.ibm.com/security/dkg.ps distributed key generation], which enables interactive threshold signatures schemes, e.g., the schemes described by [http://cacr.uwaterloo.ca/techreports/2001/corr2001-13.ps Stinson and Strobl (2001)] or [https://web.archive.org/web/20060911151529/http://theory.lcs.mit.edu/~stasio/Papers/gjkr03.pdf Genaro, Jarecki and Krawczyk (2003)]. These protocols make it possible to realize ''k''-of-''n'' threshold signatures, which ensure that any subset of size ''k'' of the set of ''n'' signers can sign but no subset of size less than ''k'' can produce a valid Schnorr signature. However, the practicality of the existing schemes is limited: most schemes in the literature have been proven secure only for the case ''k-1 < n/2'', are not secure when used concurrently in multiple sessions, or require a reliable broadcast mechanism to be secure. Further research is necessary to improve this situation.

Typically a multi-signature scheme on-chain will lead to n-1 signatures required and verified on-chain. This is obviously the most secure from a single-point-of-attack scenario but it is not practical for larger ''k''-of-''n'' values.

Other works include using BLS signatures as described by [https://alinush.github.io/2020/03/12/scalable-bls-threshold-signatures.html, Fast and Scalable BLS Threshold Signatures], which are easy to work with and allow end-points to distribute keys while at rest never having to re-create the private key required for signature because of public key/signature aggregation. An example op-code construction is described here [https://medium.com/cryptoadvance/bls-signatures-better-than-schnorr-5a7fe30ea716, BLS signature introduction].

ECDSA threshold signatures are also possible as described by [https://eprint.iacr.org/2020/498.pdf, Adam Gągol, Jędrzej Kula, Damian Straszak and Michał Świętek 2020]. This will retain compatibility with the current ECDSA infrastructure in Syscoin. However, if we move to Schnorr we can apply Schnorr threshold signatures instead in similar constructs.

ECDSA threshold signatures rely on random numbers as part of their constructions which BLS signatures do not. BLS signatures are explicit isomorphic and thus are easy to work in aggregate form. However, verification costs suffer compared to ECDSA. Wome benchmark figures are shown in the links above. BLS signatures do not use random number generation as part of their construction nor aggregation.

Because of this random number dependency along with other factors outside of the scope of this SIP, ECDSA uses zero-knowledge proofs as part of their efficient construction for threshold signatures amongst end-points. Multiple rounds of interactivity between end-points are needed to ensure they are acting as honest, valid signees. The paper by Gągol et al tries to address this by using BLS signature construction as a standard for performance but applied to ECDSA.

== Compatibility with BOLT specification ==

With Syscoin's UTXO based Syscoin Platform Tokens it is possible to establish payment channels such as those in the [https://github.com/lightningnetwork/lightning-rfc, BOLT] spec using HTLC on-chain contracts to enforce off-chain payments amongst peers.

The BOLT specification for Lightning Network payments is compatible with this approach as the additional input would be signed upon open or closing a channel. The compliance verification would require proof of provenance of honest funds by disclosing the offchain trades which can be independently verified via cryptographic analysis and tooling with provided information.

Allowing offchain payments and in particular the BOLT specification are crucial in acceptance of this proposal as although Syscoin offers on-chain scalability through the use of Z-DAG, the bandwidth requirements of global scale would not permit every user to operate on-chain without competing for block space. Although the fee market mechanism for Z-DAG is more efficient than that of Bitcoin's with the focus being to settle within some extended time period and not in the next block with some assurance of double-spend protection, it is nevertheless not conducive on its own to global adoption for efficient, fast, convenient payments to place all transactions on-chain and require bandwidth across the network for every user.

A hybrid off-chain + on-chain solution is presented by Syscoin where on-chain is used for slightly higher fees to incentivize users to use off-chain without trading-off trustlessness or decentralization, yet in this case remain compliant where applicable. Z-DAG ideally is utilized when there are occasional resilience issues with off-chain payments which are inevitable since there is no fault tolerance in the usage of off-chain globally non-consensus based payments.

== Test Vectors and Reference Code ==

== Footnotes ==

<references />

== Acknowledgements ==

Thanks goes to many industry veterans that made this document possible. Individuals and companies including but not limited to Mark Vernon of TagCash (for our discovery session), Marc Nicholson of Blockchain Foundry (Market analysis and validation), Lance Morginn of Blockchain Intelligence Group (specification validation), Zak Cole of Whiteblock.io and the Syscoin Foundation (Technical discussions related to the requirements of this proposal).
